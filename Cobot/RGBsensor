#include <Wire.h>
#include <SparkFun_APDS9960.h>
#include <Servo.h>

SparkFun_APDS9960 apds = SparkFun_APDS9960();

Servo shoulderFront;
Servo shoulderSide;
Servo shoulderDelt;
Servo elbow;
Servo grip;

int servoAngle = 0; // Initial angle for the color sensor servo

void setup() {
  Serial.begin(9600);

  shoulderFront.attach(8);
  shoulderSide.attach(9);
  shoulderDelt.attach(10);
  elbow.attach(11);
  grip.attach(12);

  if (apds.init()) {
    Serial.println(F("APDS-9960 initialization complete"));
  } else {
    Serial.println(F("Something went wrong during APDS-9960 init!"));
  }

  if (apds.enableProximitySensor(false)) {
    Serial.println(F("Proximity sensor is now running"));
  } else {
    Serial.println(F("Something went wrong during sensor init!"));
  }

  if (apds.enableLightSensor(false)) {
    Serial.println(F("Light sensor is now running"));
  } else {
    Serial.println(F("Something went wrong during light sensor init!"));
  }

  delay(500);

  shoulderFront.write(130);
  shoulderSide.write(87);
  shoulderDelt.write(330);
  elbow.write(378);
  grip.write(140);
}

void loop() {
  rotateColorSensor(); // Rotate the color sensor to the next position
  delay(500); // Add delay for stability during rotation

  // Read proximity data
  uint8_t proximity_data = 0;
  if (!apds.readProximity(proximity_data)) {
    Serial.println("Error reading proximity value");
  } else {
    Serial.print("Proximity: ");
    Serial.println(proximity_data);

    if (proximity_data > 250) {
      byte result = colorTest();

      Serial.print("RESULT = ");
      Serial.println(result);
      if (result > 0) {
        servoMove(result);
      }
    }
  }
}

void rotateColorSensor() {
  servoAngle += 30; // Rotate the color sensor by 30 degrees each time
  if (servoAngle > 180) {
    servoAngle = 0; // Reset to 0 degrees if it exceeds 180 degrees
  }
  shoulderFront.write(servoAngle);
  delay(500); // Add delay for stability during rotation
}

byte colorTest() {
  byte color = 0;

  uint16_t ambient_light = 0;
  uint16_t red_light = 0;
  uint16_t green_light = 0;
  uint16_t blue_light = 0;

  if (!apds.readAmbientLight(ambient_light) ||
      !apds.readRedLight(red_light) ||
      !apds.readGreenLight(green_light) ||
      !apds.readBlueLight(blue_light)) {
    Serial.println("Error reading light values");
  } else {
    Serial.print("Ambient: ");
    Serial.print(ambient_light);
    Serial.print(" Red: ");
    Serial.print(red_light);
    Serial.print(" Green: ");
    Serial.print(green_light);
    Serial.print(" Blue: ");
    Serial.println(blue_light);

    if (red_light > green_light && red_light > blue_light && red_light > 100) {
      color = 1;
    }

    if (green_light > red_light && green_light > blue_light && green_light > 100) {
      color = 2;
    }

    if (blue_light > red_light && blue_light > green_light && blue_light > 100) {
      color = 3;
    }
  }
  return color;
}

void servoMove(byte color) {
  // Implement the servo movements based on the detected color
  // Use the angle limits provided for each servo
  // Adjust these angles based on your specific setup

  // Example:
  if (color == 1) { // Red
    shoulderFront.write(274);
    shoulderSide.write(526);
    shoulderDelt.write(518);
    elbow.write(496);
    grip.write(140);
  } else if (color == 2) { // Green
    // Implement movements for green color
  } else if (color == 3) { // Blue
    // Implement movements for blue color
  }

  // Add delays and additional movements as needed

  // Reset to initial positions
  shoulderFront.write(130);
  shoulderSide.write(87);
  shoulderDelt.write(330);
  elbow.write(378);
  grip.write(140);

  delay(500);
}
